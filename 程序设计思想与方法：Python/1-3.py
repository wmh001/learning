# -*-coding:utf-8-*-

# 计算与计算思维
print("Hello, World!")
# 执行方式一：在命令提示符下执行：python .py（路径+）文件名
# 执行方式二：在Python解释器环境中执行：import .py文件本名，第一次执行时，将编译产生.pyc文件，以后再导入模块时运行速度将更快
# 执行方式三：在IDLE或其他编辑器中执行
# 执行方式四：双击文件

# 程序构件：数据
# 数据是被处理的信息，有字符串、数值等不同类型

# 程序构件：变量
# 用一个名字表示可变的数据，数学中多用单字母，程序中多用单词/词组
# Python标识符命名：以字母或下划线开头，后跟0个或多个字母、数字、下划线，区分大小写字母

# 良好的命名风格
# 好的命名：有意义，英文
#          保持一致风格，骆驼式命名：annualSalary，myAnnualSalary；匈牙利命名：fAnnualSalary，iMyAge

# 程序构件：表达式
# 表达式：能计算出一个值.
# 字面值: 3.14，“hello”
# 变量
# 数据用运算符 (如+、-、*、/、**)联结：2+3*4-5
# 运算符：不同类型的数据有不同运算；运算符有优先级
# 良好编程风格：用空格，括号增加表达式的可读性，而不是依赖优先级

# 程序构件：语句
# 输出语句、赋值语句

# 程序构件：函数
# 多条语句构成一个整体，并命名
# 习惯上为程序定义一个主函数main

# 程序构件：注释
# 程序中可以使用注释，用于解释变量用途，函数功能等等信息
# 注释是给人看的，对程序执行没有作用，被编译器/解释器忽略.
# 良好的编程风格：多用注释
